# -*- coding: utf-8 -*-
"""actualml_pipeline.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ixANA8x5uUGcwTJfRTYVDVlTtEkgtBBY
"""

import numpy as np
import matplotlib as mp
import pandas as pd
import sklearn

print("numpy version:",np.__version__)
print("Matplotlib Version:",mp.__version__)
print("Pandas Version:",pd.__version__)
print("Sklearn Version:",sklearn.__version__)

#Data = pd.read_csv('Sample.txt', header=None)
data = pd.read_csv('/content/Housing.csv')

data

x=data["area"]
y=data["price"]

x.shape,y.shape



from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

RandomState = 42

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2,random_state=RandomState)

np.save('x_train.npy', x_train)
np.save('x_test.npy', x_test)
np.save('y_train.npy', y_train)
np.save('y_test.npy', y_test)

# normalization

x_train = np.asarray(x_train).reshape(-1,1)
x_test = np.asarray(x_test).reshape(-1,1)

scaler = StandardScaler()
scaler.fit(x_train)
x_train_Normalized = scaler.transform(x_train)

x_test_Normalized = scaler.transform(x_test)

x_test_Normalized

'''Store the scalar object'''
import pickle
with open('scaler.pkl','wb') as f:
  pickle.dump(scaler, f)

np.save('X_test_Normalized.npy', x_test_Normalized)
np.save('X_train_Normalized.npy', x_train_Normalized)



from sklearn.linear_model import LinearRegression
reg = LinearRegression()
reg.fit(x_train_Normalized, y_train)
Score = reg.score(x_train_Normalized, y_train)
CoEfficient = reg.coef_
Intercept = reg.intercept_

Predictions = reg.predict(x_test_Normalized)

from sklearn.metrics import mean_absolute_error,mean_squared_error
mae = mean_absolute_error(y_test, Predictions)
#squared True returns MSE value, False returns RMSE value.
mse = mean_squared_error(y_test, Predictions) #default=True
rmse = mean_squared_error(y_test, Predictions,squared=False)
print("MAE:",mae)
print("MSE:",mse)
print("RMSE:",rmse)

import matplotlib.pyplot as plt
plt.scatter(x_test, y_test, color ='b')
plt.plot(x_test, Predictions, color ='k')
plt.show()

import pickle
pickle.dump(reg, open("model.pkl", "wb"))
#model = pickle.load(open("model.pkl", "rb"))

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import pickle
import numpy as np

with open('/content/model.pkl','rb') as f:
  scaler = pickle.load(f)

X_test = np.load('/content/X_test.npy', allow_pickle=True)
X_train_Normalized_Main = np.load('/content/X_train_Normalized.npy', allow_pickle=True)
X_test_Normalized_Main = np.load('/content/X_test_Normalized.npy' ,allow_pickle=True)

X_test = np.asarray(X_test).reshape(-1,1)

